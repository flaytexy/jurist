<?php
namespace frontend\modules\offers\api;

use frontend\models\Option;
use frontend\modules\offers\models\OffersProperties;
use frontend\modules\offers\OffersModule;
use Yii;
use yii\data\ActiveDataProvider;
use frontend\models\Tag;
use frontend\widgets\Fancybox;
use yii\db\Query;
use yii\widgets\LinkPager;

use frontend\modules\offers\models\Offers as OffersModel;

/**
 * Offers module API
 * @package frontend\modules\offers\api
 *
 * @method static OffersObject get(mixed $id_slug) Get offers object by id or slug
 * @method static array items(array $options = []) Get list of offers as OffersObject objects
 * @method static mixed last(int $limit = 1) Get last offers
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */
class Offers extends \frontend\components\API
{
    private $_adp;
    private $_last;
    private $_items;
    private $_item = [];

    public function api_items($options = [])
    {
        //dsadas
        if (!$this->_items) {
            $this->_items = [];

/*            $subQuery = (new Query())
                ->select(['GROUP_CONCAT(op.title SEPARATOR ":: " )'])
                ->from('easyii_offers_properties_relations as opr')
                ->join('INNER JOIN', 'easyii_offers_properties as op', 'op.property_id = opr.property_id')
                ->where('opr.offer_id=easyii_offers.offer_id');*/

            $with = ['seo'];
            if (Yii::$app->getModule('admin')->activeModules['offers']->settings['enableTags']) {
                $with[] = 'tags';
            }
            $query = OffersModel::find()
                ->with($with)
                ->status(OffersModel::STATUS_ON);

            if (!empty($options['list'])) {

                $query->select(" ".OffersModel::tableName().".*, `ca`.`country_id` as ca_id, cdt.* , cra.*, cr.name as region_name  ");

                $query->join(
                    'LEFT JOIN',
                    'country_assign as ca',
                    " `ca`.`item_id` = `".OffersModel::primaryKey()[0]."` AND `ca`.`class` LIKE '".addslashes(addslashes(OffersModel::className()))."'  "
                );

                $query->join(
                    'LEFT JOIN',
                    'country_data as cdt',
                    ' cdt.`country_id` = ca.`country_id` '
                );

                $query->join(
                    'LEFT JOIN',
                    'country_region_assign as cra',
                    ' cra.`country_id` = cdt.`country_id` '
                );

                $query->join(
                    'LEFT JOIN',
                    'country_region as cr',
                    " `cr`.`id` = `cra`.`region_id`  "
                )->andWhere(" `cr`.`is_unep` = '1' ");
            }
           // ex_print($query->createCommand()->rawSql);
            if (!empty($options['where'])) {
                $query->andFilterWhere($options['where']);
            }
            if (!empty($options['tags'])) {
                $query
                    ->innerJoinWith('tags', false)
                    ->andWhere([Tag::tableName() . '.name' => (new OffersModel)->filterTagValues($options['tags'])])
                    ->addGroupBy('offer_id');
            }
            if (!empty($options['type_id'])) {
                $query
                    ->andWhere([ 'type_id' => $options['type_id'] ]);
            }


            if (!empty($options['list'])) {
                //$query->orderBy(' `cr`.`sort_order` ASC, `cdt`.`country_id` DESC, title ASC ' );
                $query->orderBy('`cr`.`sort_order`, title' );
            }elseif (!empty($options['orderBy'])) {
                $query->orderBy($options['orderBy']);
            } else {
                $query->sortDate();
            }

            $this->_adp = new ActiveDataProvider([
                'query' => $query,
                'pagination' => !empty($options['pagination']) ? $options['pagination'] : []
            ]);

            foreach ($this->_adp->models as $model) {
                $item = new OffersObject($model);
                $item->properties = Option::find()
                    ->join(
                        'LEFT JOIN',
                        'easyii_options_assign as oa',
                        ' oa.`option_id` = `easyii_options`.`option_id`'
                    )
                    ->andWhere([
                        'item_id'  => (int)$model->offer_id,
                        'class'  => \frontend\modules\offers\models\Offers::className()
                    ])->all();

                $this->_items[] = $item;
            }
        }

        return $this->_items;
    }

    public function api_get($id_slug)
    {
        if (!isset($this->_item[$id_slug])) {
            $this->_item[$id_slug] = $this->findOffers($id_slug);
        }
        return $this->_item[$id_slug];
    }

    public function api_last($limit = 1)
    {
        if ($limit === 1 && $this->_last) {
            return $this->_last;
        }

        $with = ['seo'];
        if (Yii::$app->getModule('admin')->activeModules['offers']->settings['enableTags']) {
            $with[] = 'tags';
        }

        $result = [];
        foreach (OffersModel::find()->with($with)->status(OffersModel::STATUS_ON)->sortDate()->limit($limit)->all() as $item) {
            $result[] = new OffersObject($item);
        }

        if ($limit > 1) {
            return $result;
        } else {
            $this->_last = count($result) ? $result[0] : null;
            return $this->_last;
        }
    }

    public function api_plugin($options = [])
    {
        Fancybox::widget([
            'selector' => '.easyii-box',
            'options' => $options
        ]);
    }

    public function api_pagination()
    {
        return $this->_adp ? $this->_adp->pagination : null;
    }

    public function api_pages()
    {
        return $this->_adp ? LinkPager::widget(['pagination' => $this->_adp->pagination]) : '';
    }

    private function findOffers($id_slug)
    {
        $offers = OffersModel::find()
            ->where(['or', 'offer_id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])
            ->status(OffersModel::STATUS_ON)
            ->one();
        if ($offers) {
            $offers->updateCounters(['views' => 1]);
            return new OffersObject($offers);
        } else {
            return null;
        }
    }

    public function api_clear(){
        $this->_adp = false;
        $this->_last = false;
        $this->_items = false;
        $this->_item = [];
    }
}