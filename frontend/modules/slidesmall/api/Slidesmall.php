<?php

namespace frontend\modules\slidesmall\api;

use frontend\models\Option;
use Yii;
use yii\data\ActiveDataProvider;
use frontend\models\Tag;
use frontend\widgets\Fancybox;
use yii\db\Query;
use yii\widgets\LinkPager;

use frontend\modules\slidesmall\models\Slidesmall as SlidesmallModel;

/**
 * Slidesmall module API
 * @package frontend\modules\slidesmall\api
 *
 * @property \frontend\modules\slidesmall\models\Slidesmall $model
 *
 * @method static SlidesmallObject get(mixed $id_slug) Get slidesmall object by id or slug
 * @method static array items(array $options = []) Get list of slidesmall as SlidesmallObject objects
 * @method static mixed clear() Clear all items
 * @method static mixed last(int $limit = 1) Get last slidesmall
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */
class Slidesmall extends \common\components\API
{
    private $_adp;
    private $_last;
    private $_items;
    private $_item = [];
    private $_default_model = 'SlidesmallModel';

    public function api_items($options = [])
    {
        //e_print('api_items_start');

        $key = md5(serialize($options)).'44552fds';
        $cache = Yii::$app->cache;
        //e_print('get0');
        $this->_items = $cache->get($key.'_items');
        //e_print('get_items');
        $this->_adp = $cache->get($key.'_adp');
        //e_print('get_adp');
        //e_print('start_print');
        //e_print(isset($this->_items[0]),'_items_is_true');
        //e_print( !empty($this->_adp),'_adp_is_true');
        //e_print('end_print');

        if (!($this->_items && $this->_adp)) {
            //e_print('SET');
            $this->_items = [];

            $with = ['seo']; //['seo', 'properties'];
            if (Yii::$app->getModule('admin')->activeModules['slidesmall']->settings['enableTags']) {
                $with[] = 'tags';
            }

            $query = SlidesmallModel::find()
                ->with($with)
                ->status(SlidesmallModel::STATUS_ON);

            if (!empty($options['list'])) {

                $query->select(" " . SlidesmallModel::tableName() . ".*, cdt.* , ca.`country_id` as ca_id, cra.*, cr.name as region_name  ");

                $query->join(
                    'LEFT JOIN',
                    'country_assign as ca',
                    " `ca`.`item_id` = `" . SlidesmallModel::primaryKey()[0] . "` AND `ca`.`class` LIKE '" . addslashes(addslashes(SlidesmallModel::className())) . "'  "
                );

                $query->join(
                    'LEFT JOIN',
                    'country_data as cdt',
                    ' cdt.`country_id` = ca.`country_id` '
                );

                $query->join(
                    'LEFT JOIN',
                    'country_region_assign as cra',
                    ' cra.`country_id` = ca.`country_id` '
                );

//                $query->join(
//                    'LEFT JOIN',
//                    'country_region as cr',
//                    " `cr`.`id` = `cra`.`region_id`  "
//                )->andWhere(" `cr`.`is_unep` = '1' ");

                $query->join(
                    'LEFT JOIN',
                    'country_region as cr',
                    " `cr`.`id` = `cra`.`region_id`  "
                );
            }

            if (!empty($options['where'])) {
                $query->andFilterWhere($options['where']);
            }

            if (!empty($options['tags'])) {
                $query
                    ->innerJoinWith('tags', false)
                    ->andWhere([Tag::tableName() . '.name' => (new SlidesmallModel)->filterTagValues($options['tags'])])
                    ->addGroupBy('slide_small_id');
            }

            if (!empty($options['type_id'])) {
                $query
                    ->andWhere(['type_id' => $options['type_id']]);
            }

            //$query->groupBy('slide_small_id');
            if (!empty($options['list'])) {
                $query->orderBy(' `cr`.`sort_order` ASC, `cdt`.`country_id` DESC ');
            } elseif (!empty($options['orderBy'])) {
                $query->orderBy($options['orderBy']);
            } else {
                $query->sortDate();
            }

            $this->_adp = new ActiveDataProvider([
                'query' => $query,
                'pagination' => !empty($options['pagination']) ? $options['pagination'] : []
            ]);

            /**
             * @var SlidesmallModel $model
             */
            foreach ($this->_adp->models as $model) {
                $item = new SlidesmallObject($model);
                //$item->countries = isset($countries[$model->slide_small_id]) ? $countries[$model->slide_small_id] : $model->countries;
                $this->_items[] = $item;
            }

            $cache->set($key.'_adp', $this->_adp, 40);
            $cache->set($key.'_items', $this->_items, 40);

            //e_print('SET END');
        } else {
             ////e_print($options, '$options');
             ////e_print($this->_items, '$dataGet');
             //ex_print('GET');
        }

        //ex_print('api_items_end');

        return $this->_items;
    }

    public function api_get($id_slug)
    {
        if (!isset($this->_item[$id_slug])) {
            $this->_item[$id_slug] = $this->findSlidesmall($id_slug);
        }
        return $this->_item[$id_slug];
    }

    public function api_last($limit = 1)
    {
        if ($limit === 1 && $this->_last) {
            return $this->_last;
        }

        $with = ['seo'];
        if (Yii::$app->getModule('admin')->activeModules['slidesmall']->settings['enableTags']) {
            $with[] = 'tags';
        }

        $result = [];
        foreach (SlidesmallModel::find()->with($with)->status(SlidesmallModel::STATUS_ON)->sortDate()->limit($limit)->all() as $item) {
            $result[] = new SlidesmallObject($item);
        }

        if ($limit > 1) {
            return $result;
        } else {
            $this->_last = count($result) ? $result[0] : null;
            return $this->_last;
        }
    }

    public function api_plugin($options = [])
    {
        Fancybox::widget([
            'selector' => '.easyii-box',
            'options' => $options
        ]);
    }

    public function api_pagination()
    {
        return $this->_adp ? $this->_adp->pagination : null;
    }

    public function api_pages()
    {
        $this->_adp->pagination->pageSizeParam = false;

        if ($this->_adp) {
            return LinkPager::widget(['pagination' => $this->_adp->pagination]);
        }
        return '';
    }

    private function findSlidesmall($id_slug)
    {
        $slidesmall = SlidesmallModel::find()
            ->where(['or', 'slide_small_id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])
            ->status(SlidesmallModel::STATUS_ON)
            ->one();
        if ($slidesmall) {
            $slidesmall->updateCounters(['views' => 1]);
            return new SlidesmallObject($slidesmall);
        } else {
            return null;
        }
    }

    public function api_clear()
    {
        $this->_adp = false;
        $this->_last = false;
        $this->_items = false;
        $this->_item = [];
    }
}